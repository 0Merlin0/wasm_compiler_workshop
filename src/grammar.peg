start =
    _ d:inputs? _ l:locals? _ s:statement* _ r:return? _ {
        let statements = [];
        if (d) {
            statements.push(d);
        }
        if (l) {
            statements.push(l);
        }
        statements.push(...s);
        if (r) {
            statements.push(r);
        }
        return { type: 'program',
            children: statements }
    }

statement =
    a:assignment _ ";" {
        return a;
    }

assignment =
    i:identifier "=" s:sum {
        return { type: 'assignment',
            children: [i, s]
        }
    }

inputs =
    "inputs" _ first:identifier _ rest:( _ "," _ @identifier)* ";" {
        return { type: 'inputs',
            children: [first, ...rest]
        }
    }

locals =
    "locals" _ first:identifier _ rest:( _ "," _ @identifier)* ";" {
        return { type: 'locals',
            children: [first, ...rest]
        }
    }

return =
    "return" v:sum ";" {
        return { type: 'return',
            child: v }
    }

sum =
    first:product rest:( _ ("+" / "-") _ product)* {
        return { type: 'sum',
            child: first,
            children: rest }
    }

product =
    first:factor rest:( _ ("/" / "*") _ factor)* {
        return { type: 'product',
            child: first,
            children: rest }
    }

factor =
    _ "(" _ s:sum _ ")" _ { return s; }
    / v:value { return v; }

value =
    n:number { return n; }
    / i:identifier { return i; }

number =
    _ digits:[0-9]+ _ {
        return { type: 'number',
            value: parseInt(digits.join(""), 10) }
    }

identifier =
    _ letters:[a-zA-Z_]+ _ {
        return { type: 'identifier',
            value: letters.join("") }
    }

_ "whitespace" =
    [ \t\n]*
